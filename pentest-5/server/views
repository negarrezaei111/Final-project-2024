# class StartScanView(APIView):
#     permission_classes = [IsAuthenticated]
#
#     def post(self, request, *args, **kwargs):
#         if not request.user.is_authenticated:
#             return JsonResponse({'error': 'User not authenticated'}, status=401)
#
#         try:
#             data = request.data
#             action = data.get('action', 'start')
#             scan_identifier = data.get('scan_identifier')
#             scan_mode = data.get('scan_mode')  # Default to 'quick' if not provided
#             print("scan mode in view",scan_mode)
#             if not scan_mode:
#                 return JsonResponse({'error': 'Scan mode is required'}, status=400)
#
#             form = ScanForm(data, current_user=request.user)
#
#             if form.is_valid():
#                 url = form.cleaned_data['url']
#                 main_url = form.cleaned_data['url']
#
#                 if not isinstance(url, str) or not url.strip():
#                     return JsonResponse({'error': 'Invalid URL format or empty URL'}, status=400)
#
#                 parsed_url = urlparse(url)
#                 if not parsed_url.scheme or not parsed_url.netloc:
#                     return JsonResponse({'error': 'Invalid URL'}, status=400)
#
#                 if action == 'stop':
#                     if not scan_identifier:
#                         return JsonResponse({'error': 'Scan Identifier is required for stopping a scan'}, status=400)
#
#                     success = stop_scan_process(scan_identifier)
#                     if success:
#                         return JsonResponse({'message': f'Scan with ID {scan_identifier} has been stopped successfully'}, status=200)
#                     else:
#                         return JsonResponse({'error': 'Failed to stop scan'}, status=500)
#
#                 elif action == 'start':
#                     scan, created = Scan.objects.get_or_create(
#                         user=request.user,
#                         url=url,
#                         defaults={
#                             'scan_date': timezone.now(),
#                             'last_scan_date': timezone.now(),
#                             'security_score': 100,
#                             'scan_identifier': scan_identifier,
#                             'main_url': main_url,
#                             'status': 'in_progress'
#                         }
#                     )
#
#                     if not created and not scan.can_rescan():
#                         return JsonResponse({
#                             'scan_id': scan.id,
#                             'url': scan.url,
#                             'crawled_urls': [sub_scan.crawled_url for sub_scan in SubScan.objects.filter(scan=scan)],
#                             'vulnerabilities': json.loads(scan.vulnerabilities),
#                             'security_score': scan.security_score
#                         })
#
#                     crawled_urls = crawl(url, scan.id , scan_mode)
#                     all_vulnerabilities = []
#                     crawled_url_list = []
#
#                     for crawled_url in crawled_urls:
#                         scan.refresh_from_db()
#                         if scan.is_stopping:
#                             scan.status = 'failed'
#                             scan.save()
#                             return JsonResponse({'message': 'Scan has been stopped.'}, status=200)
#
#                         crawled_url_list.append(crawled_url)
#                         if crawled_url == url:
#                             continue
#                         scan_instance = start_scan(crawled_url, request.user,scan_mode, main_url, scan_identifier)
#                         vulnerabilities = json.loads(scan_instance.vulnerabilities) if scan_instance.vulnerabilities else []
#                         all_vulnerabilities.extend(vulnerabilities)
#
#                         SubScan.objects.create(
#                             scan=scan,
#                             crawled_url=crawled_url,
#                             vulnerabilities=json.dumps(vulnerabilities)
#                         )
#
#                         scan.refresh_from_db()
#                         if scan.is_stopping:
#                             scan.status = 'failed'
#                             scan.save()
#                             return JsonResponse({'message': 'Scan has been stopped.'}, status=200)
#                     scan.vulnerabilities = json.dumps(all_vulnerabilities)
#                     scan.is_vulnerable = bool(all_vulnerabilities)
#                     security_score = calculate_security_score(all_vulnerabilities)
#                     scan.security_score = security_score
#                     scan.status = 'completed'
#                     scan.save()
#
#                     return JsonResponse({
#                         'scan_id': scan.id,
#                         'url': scan.url,
#                         'scan_identifier': scan.scan_identifier,
#                         'crawled_urls': crawled_url_list,
#                         'vulnerabilities': all_vulnerabilities,
#                         'security_score': security_score
#                     })
#                 else:
#                     return JsonResponse({'error': 'Invalid action'}, status=400)
#             else:
#                 return JsonResponse({'error': 'Invalid form submission', 'details': form.errors}, status=400)
#         except json.JSONDecodeError:
#             return JsonResponse({'error': 'Invalid JSON format'}, status=400)
#         except Exception as e:
#             logger.error(f"Error in StartScanView: {str(e)}")
#             traceback.print_exc()
#             return JsonResponse({'error': str(e)}, status=500)