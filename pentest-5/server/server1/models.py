import logging
from datetime import timedelta
from django.db import models
from django.utils import timezone
from django.contrib.auth import get_user_model

User = get_user_model()
logger = logging.getLogger(__name__)

class Scan(models.Model):
    STATUS_CHOICES = [
        ('stopped', 'Stopped'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
        ('failed', 'Failed'),
    ]
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    url = models.URLField()
    scan_date = models.DateTimeField(auto_now_add=True)
    last_scan_date = models.DateTimeField(default=timezone.now)
    is_vulnerable = models.BooleanField(default=False)
    vulnerabilities = models.JSONField(blank=True, default=list)
    security_score = models.IntegerField(default=100)
    main_url = models.URLField(max_length=200, null=True, blank=True)
    scan_identifier = models.CharField(max_length=36, blank=True, null=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='in_progress')
    scan_type = models.CharField(max_length=50, default='all_vulnerabilities')
    is_stopping = models.BooleanField(default=False)
    def __str__(self):
        return self.url

    def can_rescan(self):
        return timezone.now() - self.last_scan_date > timedelta(hours=1)

    def update_last_scan_date(self):
        self.last_scan_date = timezone.now()
        self.save()

    def save(self, *args, **kwargs):
        logger.info(f"Saving Scan: {self.url} with status: {self.status}")
        super().save(*args, **kwargs)

    class Meta:
        unique_together = (('user', 'url'),)

class SubScan(models.Model):
    scan = models.ForeignKey(Scan, on_delete=models.CASCADE, related_name='subscans')
    crawled_url = models.URLField()
    depth = models.IntegerField(default=0)
    scan_date = models.DateTimeField(auto_now_add=True)
    is_vulnerable = models.BooleanField(default=False)
    vulnerabilities = models.JSONField(blank=True, default=list)
    security_score = models.IntegerField(default=100)

    def __str__(self):
        return f"SubScan for {self.crawled_url} under {self.scan.url}"

    def save(self, *args, **kwargs):
        logger.info(f"Saving SubScan: {self.crawled_url} under Scan: {self.scan.url}")
        super().save(*args, **kwargs)

class VulnerabilityDetail(models.Model):
    sub_scan = models.ForeignKey(SubScan, on_delete=models.CASCADE, related_name='vulnerability_details')
    parameter = models.CharField(max_length=225)
    payload = models.TextField()
    description = models.TextField()
    vuln_type = models.CharField(max_length=200)
    type = models.CharField(max_length=50, default='Unknown')

    def __str__(self):
        return f"Vulnerability in {self.sub_scan.crawled_url} on parameter {self.parameter}"

    def save(self, *args, **kwargs):
        logger.info(f"Saving VulnerabilityDetail: {self.parameter} for SubScan: {self.sub_scan.crawled_url}")
        super().save(*args, **kwargs)